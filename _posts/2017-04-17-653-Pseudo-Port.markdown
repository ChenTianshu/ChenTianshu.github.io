---

layout : post
title : 653系统虚端口机制

---

653系统操作AFDX板卡，AFDX板卡驱动是驻留在系统的核心系统层的。也就是说，由AFDX板卡到653系统各分区的数据流中，核心系统层起到数据转接的作用，负责从AFDX板卡缓存中读取数据，分发到各个分区，或者从分区中收集数据，发送给AFDX板卡发送出去。  
由于653系统分区有内存隔离机制，分区与分区之间、分区与核心系统之间对数据交互有严格的限制。分区与分区之间数据交互采用的是端口+通道的方式，核心系统与分区之间的数据交互采用虚分区+虚端口的方式，这样能保证653系统各模块之间通讯方式保持形式上的统一。  
“虚分区”机制，是在核心系统层中虚拟设置的一个分区，主要由虚端口构成，作用是提供与其他分区数据交互的接口。和正常分区不同，虚分区没有独立的项目文件，不能直接添加代码；系统初始化阶段提供了虚分区初始化入口函数`usrPseudoPortCreate()`，在入口函数中编写代码，实现AFDX驱动函数在核心系统层的挂接。  
BST25201板卡提供的驱动为CPCI单周期读写驱动，没有使用CPCI总线DMA方式读写数据。主要涉及到的驱动函数有`BSTAFDX_Config`、`BSTAFDX_Open`、`BSTAFDX_OpenPort`、`BSTAFDX_Send`、`BSTAFDX_Receive`。  
653系统提供了驱动挂接函数`portPesudoDrvAdd()`和驱动挂钩函数指针`PORT_DRV_FCT`，将这些指针分别指向对应功能的AFDX驱动函数，为AFDX驱动在系统中分配一个驱动名称，完成AFDX驱动的挂接。  
在653系统中，核心系统中的AFDX驱动函数是和虚端口相关联的，在虚端口设置中，需要为虚端口指定对应的驱动名称。当有数据到达虚端口时，根据虚端口上配置的驱动名称，在系统中搜索已注册的对应的驱动，之后根据数据在虚端口的方向，调用PORT_DRV_FCT函数指针的Read()或Write()，对数据进行操作。
